// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

// Enums
enum Role {
  ADMIN
  USER
}

enum QuestionType {
  GLOBAL
  USER
}

enum MessageType {
  SYSTEM
  USER
}

// Single models
model User {
  id       String @id @default(uuid())
  email    String @unique
  password String
  role     Role   @default(USER)

  // Foreign relationship
  sessions  Session[]
  questions UserQuestion[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  id   Int    @id @default(autoincrement())
  name String

  // Foreign relationship
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Question {
  id      Int          @id @default(autoincrement())
  content String       @unique
  type    QuestionType

  // Foreign relationships
  users   UserQuestion[]
  answers QuestionAnswer[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Answer {
  id      Int    @id @default(autoincrement())
  content String @unique

  // Foreign relationships
  questions QuestionAnswer[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id      Int         @id @default(autoincrement())
  content String
  type    MessageType

  // Foreign relationship
  Session   Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Join models
model UserQuestion {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId Int

  @@id([userId, questionId])
}

model QuestionAnswer {
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId Int
  answer     Answer   @relation(fields: [answerId], references: [id], onDelete: Cascade)
  answerId   Int

  @@id([questionId, answerId])
}
